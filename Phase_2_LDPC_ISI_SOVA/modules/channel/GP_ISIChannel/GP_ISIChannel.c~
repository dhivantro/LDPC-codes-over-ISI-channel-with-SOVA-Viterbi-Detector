// Software Recording Channel (SWRC) platform in C.
// Name      : GP_ISIChannel
// Type      : module.
// Path      : modules/channel/GP_ISIChannel
// Dependency: 
// Version   : 1.0
// Author(s) : Kheong Sann Chan.
// Date      : Mon Mar 28 17:14:10 2022
// Comment   : ISI channel module parameters 

#include "GP_ISIChannel.h"
#include <math.h>
#include <stdio.h>
#include <string.h>

#define PI 3.14

// Print the double *h struct
void printHGP_ISIChannelStruct (GP_ISIChannelStruct *GP_ISIChannel) {
}

// Free the memory allocated to double *h
void freeHGP_ISIChannelStruct (GP_ISIChannelStruct *GP_ISIChannel) {
}

// Allocate memory for double *h
void allocateHGP_ISIChannelStruct (GP_ISIChannelStruct *GP_ISIChannel) {
}

// Initialize the fields in the module structure
// Set pointers to NULL (so they can be called with realloc)
// Initialize the parameters to sane start-up values.
void initGP_ISIChannelStruct (GP_ISIChannelStruct *GP_ISIChannel) {
// Fields entered by the user during module creation (saved to .cfg file, and initialized by init routine)
  GP_ISIChannel->N                    = 0;
  GP_ISIChannel->h                    = NULL;
  GP_ISIChannel->R                    = 0.0;
  GP_ISIChannel->SNR                  = 0.0;
  GP_ISIChannel->sigma                = 0.0;
// Fields automatically included in every module that request $args{i}
  GP_ISIChannel->trainFlag            = 0;
  GP_ISIChannel->N_train              = 0;
  GP_ISIChannel->i_train              = 0;
  GP_ISIChannel->numberOfMult         = 0;
  GP_ISIChannel->aveNoOfMultPerFrame  = 0.0;
  GP_ISIChannel->numberOfAdd          = 0;
  GP_ISIChannel->aveNoOfAddPerFrame   = 0.0;
  GP_ISIChannel->numberOfComp         = 0;
  GP_ISIChannel->aveNoOfCompPerFrame  = 0.0;
  GP_ISIChannel->simTime              = 0.0;
  GP_ISIChannel->aveSimTimePerFrame   = 0.0;
  GP_ISIChannel->numberOfCalls        = 0;
}

// Frees up all the memory in the structure
void freeGP_ISIChannelStruct (GP_ISIChannelStruct *GP_ISIChannel) {
  if (GP_ISIChannel==NULL) {printf("GP_ISIChannel=NULL in function freeGP_ISIChannelStruct not free'ing\n");return;}
  int i;
  GP_ISIChannel->N              =0;
  //Free double *h
  freeHGP_ISIChannelStruct(GP_ISIChannel);
  GP_ISIChannel->R              =0.0;
  GP_ISIChannel->SNR            =0.0;
  GP_ISIChannel->sigma          =0.0;
  GP_ISIChannel->trainFlag      =0;
  GP_ISIChannel->N_train        =0;
  GP_ISIChannel->i_train        =0;
  GP_ISIChannel->numberOfMult   =0;
  GP_ISIChannel->aveNoOfMultPerFrame=0.0;
  GP_ISIChannel->numberOfAdd    =0;
  GP_ISIChannel->aveNoOfAddPerFrame=0.0;
  GP_ISIChannel->numberOfComp   =0;
  GP_ISIChannel->aveNoOfCompPerFrame=0.0;
  GP_ISIChannel->simTime        =0.0;
  GP_ISIChannel->aveSimTimePerFrame=0.0;
  GP_ISIChannel->numberOfCalls  =0;
  //free(GP_ISIChannel);GP_ISIChannel=NULL;
}

// Prints the contents of the structure.
// Used for determining the status of the simulation
// as well as for debugging.
void printGP_ISIChannelStruct (GP_ISIChannelStruct *GP_ISIChannel, char *name, int index, int pre) {
  int i,j;
  char *preString,*name2;
  if (GP_ISIChannel==NULL) {printf("%s%s=NULL\n",preString,name);return;}
  preString=(char*)calloc((pre+1),sizeof(char));
  for (i=0;i<pre;i++) preString[i]=' '; preString[i]='\0';
  printf("%s[--%d:%s--------\n",preString,index,name);
// Fields entered by the user during module creation (saved to .cfg file, and initialized by init routine)
    printf("%s  int                  %s->N=%d\n",preString,name,GP_ISIChannel->N);                     // Print int N
    printHGP_ISIChannelStruct(GP_ISIChannel);                                                          // Print double *h
    printf("%s  double               %s->R=%lf\n",preString,name,GP_ISIChannel->R);                    // Print double R
    printf("%s  double               %s->SNR=%lf\n",preString,name,GP_ISIChannel->SNR);                // Print double SNR
    printf("%s  double               %s->sigma=%lf\n",preString,name,GP_ISIChannel->sigma);            // Print double sigma
// Fields automatically included in every module that request $args{i}
    printf("%s  uint8_t              %s->trainFlag=%"SCNu8"\n",preString,name,GP_ISIChannel->trainFlag); // Print uint8_t trainFlag
    printf("%s  long int             %s->N_train=%ld\n",preString,name,GP_ISIChannel->N_train);        // Print long int N_train
    printf("%s  long int             %s->i_train=%ld\n",preString,name,GP_ISIChannel->i_train);        // Print long int i_train
    printf("%s  long unsigned int    %s->numberOfMult=%lu\n",preString,name,GP_ISIChannel->numberOfMult); // Print long unsigned int numberOfMult
    printf("%s  double               %s->aveNoOfMultPerFrame=%lf\n",preString,name,GP_ISIChannel->aveNoOfMultPerFrame); // Print double aveNoOfMultPerFrame
    printf("%s  long unsigned int    %s->numberOfAdd=%lu\n",preString,name,GP_ISIChannel->numberOfAdd); // Print long unsigned int numberOfAdd
    printf("%s  double               %s->aveNoOfAddPerFrame=%lf\n",preString,name,GP_ISIChannel->aveNoOfAddPerFrame); // Print double aveNoOfAddPerFrame
    printf("%s  long unsigned int    %s->numberOfComp=%lu\n",preString,name,GP_ISIChannel->numberOfComp); // Print long unsigned int numberOfComp
    printf("%s  double               %s->aveNoOfCompPerFrame=%lf\n",preString,name,GP_ISIChannel->aveNoOfCompPerFrame); // Print double aveNoOfCompPerFrame
    printf("%s  double               %s->simTime=%lf\n",preString,name,GP_ISIChannel->simTime);        // Print double simTime
    printf("%s  double               %s->aveSimTimePerFrame=%lf\n",preString,name,GP_ISIChannel->aveSimTimePerFrame); // Print double aveSimTimePerFrame
    printf("%s  long unsigned int    %s->numberOfCalls=%lu\n",preString,name,GP_ISIChannel->numberOfCalls); // Print long unsigned int numberOfCalls
  printf("%s---%d:%s-------]\n",preString,index,name);
  free(preString);
}

// Store random values into the fields of GP_ISIChannelStruct.
// For testing that saving to .cfg file works.
// User should help to write appropriate random-generating values
// to be stored in the appropriate fields.
void randomizeGP_ISIChannelStruct (GP_ISIChannelStruct *GP_ISIChannel) {
  int idum=1;SWRC_randomize(&idum);
  //GP_ISIChannel->N=rand();
  //GP_ISIChannel->h=ran2(&idum);
  //GP_ISIChannel->R=ran2(&idum);
  //GP_ISIChannel->SNR=ran2(&idum);
  //GP_ISIChannel->sigma=ran2(&idum);
}

// Initialize an array of GP_ISIChannelStruct's to sane starting values
void initArrayGP_ISIChannelStruct (arrayGP_ISIChannelStruct *GP_ISIChannel) {
  GP_ISIChannel->N_x=0;
  GP_ISIChannel->x=NULL;
}

// Allocate memory for an array of N GP_ISIChannelStruct's
void allocateArrayGP_ISIChannelStruct (arrayGP_ISIChannelStruct *GP_ISIChannel,int N) {
  int i;
  GP_ISIChannel->N_x=N;
  GP_ISIChannel->x = (GP_ISIChannelStruct*)realloc(GP_ISIChannel->x,N*sizeof(GP_ISIChannelStruct));
  for (i=0;i<GP_ISIChannel->N_x;i++) {
    initGP_ISIChannelStruct(&GP_ISIChannel->x[i]);
  }
}

// Free an array of GP_ISIChannelStruct's
void freeArrayGP_ISIChannelStruct (arrayGP_ISIChannelStruct *GP_ISIChannel) {
  if (GP_ISIChannel==NULL) {printf("GP_ISIChannel=NULL in function freeArrayGP_ISIChannelStruct not free'ing\n");return;}
  int i;
  for (i=0;i<GP_ISIChannel->N_x;i++) {
    freeGP_ISIChannelStruct(&GP_ISIChannel->x[i]);
  } free(GP_ISIChannel->x);GP_ISIChannel->x=NULL;
}

// Fill the arrayGP_ISIChannelStruct with random values.
// The GP_ISIChannel->N_GP_ISIChannel parameter 
// must be set to the number of elements in the array.
// Array must be allocated before calling this function.
void randomizeArrayGP_ISIChannelStruct (arrayGP_ISIChannelStruct *GP_ISIChannel) {
  int i;
  for (i=0;i<GP_ISIChannel->N_x;i++) randomizeGP_ISIChannelStruct(&GP_ISIChannel->x[i]);
}

// Print arrayGP_ISIChannelStruct
void printArrayGP_ISIChannelStruct (arrayGP_ISIChannelStruct *GP_ISIChannel) {
  int i;
  for (i=0;i<GP_ISIChannel->N_x;i++) {
    printGP_ISIChannelStruct(&GP_ISIChannel->x[i],"GP_ISIChannel",i,0);
  }
}

// Initialize a double array of GP_ISIChannelStruct to sane startup values
void initDoubleArrayGP_ISIChannelStruct (doubleArrayGP_ISIChannelStruct *GP_ISIChannel) {
  GP_ISIChannel->N_N_x=0;
  GP_ISIChannel->N_x=NULL;
  GP_ISIChannel->x=NULL;
}

// Allocate memory for a rectangular double array of GP_ISIChannelStruct
void allocateDoubleArrayGP_ISIChannelStruct (doubleArrayGP_ISIChannelStruct *GP_ISIChannel, int N, int M) {
  int i,j;
  GP_ISIChannel->N_N_x=N;
  GP_ISIChannel->N_x=(long unsigned int*)realloc(GP_ISIChannel->N_x,N*sizeof(long unsigned int));
  for (i=0;i<GP_ISIChannel->N_N_x;i++) GP_ISIChannel->N_x[i]=M;
  GP_ISIChannel->x=(GP_ISIChannelStruct**)realloc(GP_ISIChannel->x,N*sizeof(GP_ISIChannelStruct*));
  for (i=0;i<GP_ISIChannel->N_N_x;i++) {
    GP_ISIChannel->x[i]=(GP_ISIChannelStruct*)calloc(M,sizeof(GP_ISIChannelStruct));
  for(j=0;j<GP_ISIChannel->N_x[i];j++) initGP_ISIChannelStruct(&GP_ISIChannel->x[i][j]);
  }
}

// Free a double array of GP_ISIChannelStruct's
void freeDoubleArrayGP_ISIChannelStruct (doubleArrayGP_ISIChannelStruct *GP_ISIChannel) {
  int i;
  for (i=0;i<GP_ISIChannel->N_N_x;i++) {
    if (GP_ISIChannel->x[i]!=NULL) free(GP_ISIChannel->x[i]);
  }
  free(GP_ISIChannel->N_x);GP_ISIChannel->N_x=NULL;
  free(GP_ISIChannel->x);GP_ISIChannel->x=NULL;
}

// Print arrayGP_ISIChannelStruct
void printDoubleArrayGP_ISIChannelStruct (doubleArrayGP_ISIChannelStruct *GP_ISIChannel, char *name, int index, int pre) {
}

// Plot function generates any plots associated with the 
// structure
void plotGP_ISIChannelStruct (GP_ISIChannelStruct *GP_ISIChannel, const char *filename) {
}

// All the data from all the modules is packed into an
// array of uint8_vectors for saving. One uint8_vector per module. 
// Each uint8_vector contains a stringified version of the
// data in the struct. uint8_vectors are then written to and 
// read from disk by the SWRC_saveuint8_vector and SWRC_loaduint8_vector 
// functions. This function packs struct data into a uint_8_vector
void packGP_ISIChannelStruct (GP_ISIChannelStruct *GP_ISIChannel, uint8_vector *cfgFile) {
  int i;
 //Fields entered by the user during module creation (saved to .cfg file, and initialized by init routine)
  // Pack int N
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->N,1,sizeof(int),cfgFile);
  // Pack double *h
  SWRC_packToUint8((uint8_t*)GP_ISIChannel->h,GP_ISIChannel->N_h,sizeof(double),cfgFile);
  // Pack double R
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->R,1,sizeof(double),cfgFile);
  // Pack double SNR
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->SNR,1,sizeof(double),cfgFile);
  // Pack double sigma
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->sigma,1,sizeof(double),cfgFile);
 //Fields automatically included in every module that request $args{i}
  // Pack uint8_t trainFlag
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->trainFlag,1,sizeof(uint8_t),cfgFile);
  // Pack long int N_train
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->N_train,1,sizeof(long int),cfgFile);
  // Pack long int i_train
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->i_train,1,sizeof(long int),cfgFile);
  // Pack long unsigned int numberOfMult
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->numberOfMult,1,sizeof(long unsigned int),cfgFile);
  // Pack double aveNoOfMultPerFrame
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->aveNoOfMultPerFrame,1,sizeof(double),cfgFile);
  // Pack long unsigned int numberOfAdd
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->numberOfAdd,1,sizeof(long unsigned int),cfgFile);
  // Pack double aveNoOfAddPerFrame
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->aveNoOfAddPerFrame,1,sizeof(double),cfgFile);
  // Pack long unsigned int numberOfComp
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->numberOfComp,1,sizeof(long unsigned int),cfgFile);
  // Pack double aveNoOfCompPerFrame
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->aveNoOfCompPerFrame,1,sizeof(double),cfgFile);
  // Pack double simTime
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->simTime,1,sizeof(double),cfgFile);
  // Pack double aveSimTimePerFrame
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->aveSimTimePerFrame,1,sizeof(double),cfgFile);
  // Pack long unsigned int numberOfCalls
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->numberOfCalls,1,sizeof(long unsigned int),cfgFile);
}

// After loading the data back from a .cfg file, the data is unpacked
// back into the struct with this function.
void unpackGP_ISIChannelStruct (GP_ISIChannelStruct *GP_ISIChannel, uint8_vector *cfgFile) {
  int i;
  freeGP_ISIChannelStruct(GP_ISIChannel);
// Fields entered by the user during module creation (saved to .cfg file, and initialized by init routine)
  // Unpack int N
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->N,1,sizeof(int),cfgFile);
  // Unpack double *h
  if ((GP_ISIChannel->N_h)!=0) {
    GP_ISIChannel->h = (double*)calloc(GP_ISIChannel->N_h,sizeof(double));
    SWRC_unpackFromUint8((uint8_t*)GP_ISIChannel->h,GP_ISIChannel->N_h,sizeof(double),cfgFile);
  }
  // Unpack double R
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->R,1,sizeof(double),cfgFile);
  // Unpack double SNR
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->SNR,1,sizeof(double),cfgFile);
  // Unpack double sigma
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->sigma,1,sizeof(double),cfgFile);
// Fields automatically included in every module that request $args{i}
  // Unpack uint8_t trainFlag
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->trainFlag,1,sizeof(uint8_t),cfgFile);
  // Unpack long int N_train
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->N_train,1,sizeof(long int),cfgFile);
  // Unpack long int i_train
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->i_train,1,sizeof(long int),cfgFile);
  // Unpack long unsigned int numberOfMult
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->numberOfMult,1,sizeof(long unsigned int),cfgFile);
  // Unpack double aveNoOfMultPerFrame
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->aveNoOfMultPerFrame,1,sizeof(double),cfgFile);
  // Unpack long unsigned int numberOfAdd
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->numberOfAdd,1,sizeof(long unsigned int),cfgFile);
  // Unpack double aveNoOfAddPerFrame
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->aveNoOfAddPerFrame,1,sizeof(double),cfgFile);
  // Unpack long unsigned int numberOfComp
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->numberOfComp,1,sizeof(long unsigned int),cfgFile);
  // Unpack double aveNoOfCompPerFrame
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->aveNoOfCompPerFrame,1,sizeof(double),cfgFile);
  // Unpack double simTime
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->simTime,1,sizeof(double),cfgFile);
  // Unpack double aveSimTimePerFrame
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->aveSimTimePerFrame,1,sizeof(double),cfgFile);
  // Unpack long unsigned int numberOfCalls
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->numberOfCalls,1,sizeof(long unsigned int),cfgFile);
}

// Pack the contents of arrayGP_ISIChannelStruct to a uint8_vector
void packArrayGP_ISIChannelStruct (arrayGP_ISIChannelStruct *GP_ISIChannel, uint8_vector *cfgFile) {
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->N_x,1,sizeof(long unsigned int),cfgFile);
  SWRC_packToUint8((uint8_t*)GP_ISIChannel->x,GP_ISIChannel->N_x,sizeof(GP_ISIChannelStruct),cfgFile);
}

// Unpack the contents of arrayGP_ISIChannelStruct from a uint8_vector.
void unpackArrayGP_ISIChannelStruct (arrayGP_ISIChannelStruct *GP_ISIChannel, uint8_vector *cfgFile) {
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->N_x,1,sizeof(long unsigned int),cfgFile);
  GP_ISIChannel->x = (GP_ISIChannelStruct*)realloc(GP_ISIChannel->x,GP_ISIChannel->N_x*sizeof(GP_ISIChannelStruct));
  SWRC_unpackFromUint8((uint8_t*)GP_ISIChannel->x,GP_ISIChannel->N_x,sizeof(GP_ISIChannelStruct),cfgFile);
}

// Pack the contents of doubleArrayGP_ISIChannelStruct to a uint8_vector
void packDoubleArrayGP_ISIChannelStruct (doubleArrayGP_ISIChannelStruct *GP_ISIChannel, uint8_vector *cfgFile) {
  int i;
  SWRC_packToUint8((uint8_t*)&GP_ISIChannel->N_N_x,1,sizeof(long unsigned int),cfgFile);
  SWRC_packToUint8((uint8_t*)GP_ISIChannel->N_x,GP_ISIChannel->N_N_x,sizeof(long unsigned int),cfgFile);
  for (i=0;i<GP_ISIChannel->N_N_x;i++) 
    SWRC_packToUint8((uint8_t*)GP_ISIChannel->x[i],GP_ISIChannel->N_x[i],sizeof(GP_ISIChannelStruct),cfgFile);
}

// Unpack the contents of doubleArrayGP_ISIChannelStruct from a uint8_vector
void unpackDoubleArrayGP_ISIChannelStruct (doubleArrayGP_ISIChannelStruct *GP_ISIChannel, uint8_vector *cfgFile) {
  int i;
  SWRC_unpackFromUint8((uint8_t*)&GP_ISIChannel->N_N_x,1,sizeof(long unsigned int),cfgFile);
  // allocate memory for and unpack GP_ISIChannel->N_GP_ISIChannel
  GP_ISIChannel->N_x=(long unsigned int*) realloc(GP_ISIChannel->N_x,GP_ISIChannel->N_N_x*sizeof(long unsigned int));
  SWRC_unpackFromUint8((uint8_t*)GP_ISIChannel->N_x,GP_ISIChannel->N_N_x,sizeof(long unsigned int),cfgFile);
  // allocate memory for GP_ISIChannel->GP_ISIChannel
  GP_ISIChannel->x=(GP_ISIChannelStruct**)realloc(GP_ISIChannel->x,GP_ISIChannel->N_N_x*sizeof(GP_ISIChannelStruct*));
  for (i=0;i<GP_ISIChannel->N_N_x;i++) {
    SWRC_unpackFromUint8((uint8_t*)GP_ISIChannel->x[i],GP_ISIChannel->N_x[i],sizeof(GP_ISIChannelStruct),cfgFile);
  }
}

// Function for loading the struct
int loadGP_ISIChannelStruct (GP_ISIChannelStruct *GP_ISIChannel, char *filename) {
}

// Function for saving the struct
void saveGP_ISIChannelStruct (GP_ISIChannelStruct *GP_ISIChannel, char *filename) {
}

// Set parameters (fields) in the structure
// Change the values of fields in the structure
void setParmGP_ISIChannelStruct (GP_ISIChannelStruct *GP_ISIChannel, char *arg) {
  int i;
  SWRC_removeSpaces(arg);
   if (SWRC_readSingleArgumentFromString(arg,"N",&GP_ISIChannel->N,"%d")==1) {
     printf("N=%d\n",GP_ISIChannel->N);
   }
  // if (SWRC_readMultipleArgumentsFromString(arg,"h",(void**)&GP_ISIChannel->h,&GP_ISIChannel->,sizeof(double),"%lf")>0) {
  //   printf("h=[");for (i=0;i<GP_ISIChannel->;i++){printf("%lf ",GP_ISIChannel->h[i]);}printf("]\n");
  // }
  // if (SWRC_readSingleArgumentFromString(arg,"R",&GP_ISIChannel->R,"%lf")==1) {
  //   printf("R=%lf\n",GP_ISIChannel->R);
  // }
  if (SWRC_readSingleArgumentFromString(arg,"SNR",&GP_ISIChannel->SNR,"%lf")==1) {
    printf("SNR=%lf\n",GP_ISIChannel->SNR);
  }
  // if (SWRC_readSingleArgumentFromString(arg,"sigma",&GP_ISIChannel->sigma,"%lf")==1) {
  //   printf("sigma=%lf\n",GP_ISIChannel->sigma);
  // }
  // if (SWRC_readSingleArgumentFromString(arg,"trainFlag",&GP_ISIChannel->trainFlag,"%"SCNu8"")==1) {
  //   printf("trainFlag=%"SCNu8"\n",GP_ISIChannel->trainFlag);
  // }
  // if (SWRC_readSingleArgumentFromString(arg,"N_train",&GP_ISIChannel->N_train,"%ld")==1) {
  //   printf("N_train=%ld\n",GP_ISIChannel->N_train);
  // }
  // if (SWRC_readSingleArgumentFromString(arg,"i_train",&GP_ISIChannel->i_train,"%ld")==1) {
  //   printf("i_train=%ld\n",GP_ISIChannel->i_train);
  // }
  // if (SWRC_readSingleArgumentFromString(arg,"numberOfMult",&GP_ISIChannel->numberOfMult,"%lu")==1) {
  //   printf("numberOfMult=%lu\n",GP_ISIChannel->numberOfMult);
  // }
  // if (SWRC_readSingleArgumentFromString(arg,"aveNoOfMultPerFrame",&GP_ISIChannel->aveNoOfMultPerFrame,"%lf")==1) {
  //   printf("aveNoOfMultPerFrame=%lf\n",GP_ISIChannel->aveNoOfMultPerFrame);
  // }
  // if (SWRC_readSingleArgumentFromString(arg,"numberOfAdd",&GP_ISIChannel->numberOfAdd,"%lu")==1) {
  //   printf("numberOfAdd=%lu\n",GP_ISIChannel->numberOfAdd);
  // }
  // if (SWRC_readSingleArgumentFromString(arg,"aveNoOfAddPerFrame",&GP_ISIChannel->aveNoOfAddPerFrame,"%lf")==1) {
  //   printf("aveNoOfAddPerFrame=%lf\n",GP_ISIChannel->aveNoOfAddPerFrame);
  // }
  // if (SWRC_readSingleArgumentFromString(arg,"numberOfComp",&GP_ISIChannel->numberOfComp,"%lu")==1) {
  //   printf("numberOfComp=%lu\n",GP_ISIChannel->numberOfComp);
  // }
  // if (SWRC_readSingleArgumentFromString(arg,"aveNoOfCompPerFrame",&GP_ISIChannel->aveNoOfCompPerFrame,"%lf")==1) {
  //   printf("aveNoOfCompPerFrame=%lf\n",GP_ISIChannel->aveNoOfCompPerFrame);
  // }
  // if (SWRC_readSingleArgumentFromString(arg,"simTime",&GP_ISIChannel->simTime,"%lf")==1) {
  //   printf("simTime=%lf\n",GP_ISIChannel->simTime);
  // }
  // if (SWRC_readSingleArgumentFromString(arg,"aveSimTimePerFrame",&GP_ISIChannel->aveSimTimePerFrame,"%lf")==1) {
  //   printf("aveSimTimePerFrame=%lf\n",GP_ISIChannel->aveSimTimePerFrame);
  // }
  // if (SWRC_readSingleArgumentFromString(arg,"numberOfCalls",&GP_ISIChannel->numberOfCalls,"%lu")==1) {
  //   printf("numberOfCalls=%lu\n",GP_ISIChannel->numberOfCalls);
  // }
  if (*arg!='\0') {
    printf("GP_ISIChannel module: Remaining unknown parms in arg list:%s\n Please correct and run again.\n",arg);exit(-1);
  }
}

// A command comes from the user
// This function processes and executes the command
// some commands need a signal to operate on, which is
// passed via the signalStruct. 
void processCommandGP_ISIChannel (GP_ISIChannelStruct *GP_ISIChannel, signalStruct *signal, const char *command) {
  char commandParameter[400];
  int i;
  printf("processCommandGP_ISIChannel:%s\n",command);
  for(i=0;i<400 && i<strlen(command);) {
    if (SWRC_matchCommand(command,"load",&i,commandParameter,400)==1) {
	loadGP_ISIChannelStruct(GP_ISIChannel,commandParameter);
	continue;
    }

    if (SWRC_matchCommand(command,"print",&i,commandParameter,400)==1) {
	printGP_ISIChannelStruct(GP_ISIChannel,"GP_ISIChannel",0,0);
	continue;
    }

    if (SWRC_matchCommand(command,"setParm",&i,commandParameter,400)==1) {
	setParmGP_ISIChannelStruct(GP_ISIChannel,commandParameter);
	continue;
    }

    if (SWRC_matchCommand(command,"checkParm",&i,commandParameter,400)==1) {
	checkParametersGP_ISIChannel(GP_ISIChannel);
	continue;
    }

    if (SWRC_matchCommand(command,"precomp",&i,commandParameter,400)==1) {
	precompGP_ISIChannel(GP_ISIChannel);
	continue;
    }

    if (SWRC_matchCommand(command,"postcomp",&i,commandParameter,400)==1) {
	postcompGP_ISIChannel(GP_ISIChannel,0);
	continue;
    }

    if (SWRC_matchCommand(command,"help",&i,commandParameter,400)==1) {
	helpCommandGP_ISIChannel(0);
	continue;
    }

    if (SWRC_matchCommand(command,"run",&i,commandParameter,400)==1) {
	runGP_ISIChannel(GP_ISIChannel, signal);
	continue;
    }

    printf("processCommandGP_ISIChannel: Unknown command:%s\n",&command[i]);
    break;
  }
}

// Provides instructions on the commands that this module is able to process.
void helpCommandGP_ISIChannel (int index) {
  printf("Commands recognized by %d:GP_ISIChannelStruct:\n",index);
  printf("  \"print();\"        : print the GP_ISIChannelStruct fields\n");
  printf("  \"setParm(arg);\"   : set the GP_ISIChannelStruct fields\n");
  printf("  \"help();\"         : display this help screen\n");
}

// Check that all the parameters needed to run the simulation are present.
// Uncomment any/all variables that _need_ to be present for the simulation to run.
int checkParametersGP_ISIChannel (GP_ISIChannelStruct *GP_ISIChannel) {
  int output=0;
  //if (GP_ISIChannel->N==0) {output++;printf("GP_ISIChannel->N needed, but not set\n");}
  //if (GP_ISIChannel->h==NULL) {output++;printf("GP_ISIChannel->h needed, but not set\n");}
  //if (GP_ISIChannel->R==0.0) {output++;printf("GP_ISIChannel->R needed, but not set\n");}
  //if (GP_ISIChannel->SNR==0.0) {output++;printf("GP_ISIChannel->SNR needed, but not set\n");}
  //if (GP_ISIChannel->sigma==0.0) {output++;printf("GP_ISIChannel->sigma needed, but not set\n");}
  //if (GP_ISIChannel->trainFlag==0) {output++;printf("GP_ISIChannel->trainFlag needed, but not set\n");}
  //if (GP_ISIChannel->N_train==0) {output++;printf("GP_ISIChannel->N_train needed, but not set\n");}
  //if (GP_ISIChannel->i_train==0) {output++;printf("GP_ISIChannel->i_train needed, but not set\n");}
  //if (GP_ISIChannel->numberOfMult==0) {output++;printf("GP_ISIChannel->numberOfMult needed, but not set\n");}
  //if (GP_ISIChannel->aveNoOfMultPerFrame==0.0) {output++;printf("GP_ISIChannel->aveNoOfMultPerFrame needed, but not set\n");}
  //if (GP_ISIChannel->numberOfAdd==0) {output++;printf("GP_ISIChannel->numberOfAdd needed, but not set\n");}
  //if (GP_ISIChannel->aveNoOfAddPerFrame==0.0) {output++;printf("GP_ISIChannel->aveNoOfAddPerFrame needed, but not set\n");}
  //if (GP_ISIChannel->numberOfComp==0) {output++;printf("GP_ISIChannel->numberOfComp needed, but not set\n");}
  //if (GP_ISIChannel->aveNoOfCompPerFrame==0.0) {output++;printf("GP_ISIChannel->aveNoOfCompPerFrame needed, but not set\n");}
  //if (GP_ISIChannel->simTime==0.0) {output++;printf("GP_ISIChannel->simTime needed, but not set\n");}
  //if (GP_ISIChannel->aveSimTimePerFrame==0.0) {output++;printf("GP_ISIChannel->aveSimTimePerFrame needed, but not set\n");}
  //if (GP_ISIChannel->numberOfCalls==0) {output++;printf("GP_ISIChannel->numberOfCalls needed, but not set\n");}
  return(output);
}

// Precomputation done just prior to the main for loop
// iterating the BER/FER are put into this subroutine
void precompGP_ISIChannel (GP_ISIChannelStruct *GP_ISIChannel) {
  GP_ISIChannel->i_train=0;
  GP_ISIChannel->numberOfMult=0;
  GP_ISIChannel->aveNoOfMultPerFrame=0.0;
  GP_ISIChannel->numberOfAdd=0;
  GP_ISIChannel->aveNoOfAddPerFrame=0.0;
  GP_ISIChannel->numberOfComp=0;
  GP_ISIChannel->aveNoOfCompPerFrame=0.0;
  GP_ISIChannel->simTime=0.0;
  GP_ISIChannel->aveSimTimePerFrame=0.0;
  GP_ISIChannel->numberOfCalls=0;
}

// postComputation, such as freeing up any memory, done after
// the iteration of the BER/FER are put into this subroutine
void postcompGP_ISIChannel (GP_ISIChannelStruct *GP_ISIChannel, char finishedFlag) {
  GP_ISIChannel->aveNoOfMultPerFrame=(double)GP_ISIChannel->numberOfMult/GP_ISIChannel->numberOfCalls;
  GP_ISIChannel->aveNoOfAddPerFrame=(double)GP_ISIChannel->numberOfAdd/GP_ISIChannel->numberOfCalls;
  GP_ISIChannel->aveNoOfCompPerFrame=(double)GP_ISIChannel->numberOfComp/GP_ISIChannel->numberOfCalls;
  GP_ISIChannel->aveSimTimePerFrame=(double)GP_ISIChannel->simTime/GP_ISIChannel->numberOfCalls;
}

// Function called prior to training. Zero out statistics matrices,
// set the i_train index to zero etc...
void pretrainGP_ISIChannel (GP_ISIChannelStruct *GP_ISIChannel) {
  GP_ISIChannel->i_train=0;
}

// Function called after training. Free allocated memory etc...
void posttrainGP_ISIChannel (GP_ISIChannelStruct *GP_ISIChannel) {
}

// Some modules have a training phase where modules before them are run
// and statistics collected so the module can run properly.
// This function performs the training for the module then 
// saved back to the .cfg file.
// Returns 1 if training is complete
// Returns 0 otherwise
int trainGP_ISIChannel (GP_ISIChannelStruct *GP_ISIChannel, signalStruct *signal) {
  if ((GP_ISIChannel->trainFlag&1)==1) { // Training complete, call the run function
    printf("Running GP_ISIChannel\n");
    runGP_ISIChannel(GP_ISIChannel,signal);
    return(1);
  } else {                 // Do the training
    printf("Training GP_ISIChannel %ld/%ld\n",GP_ISIChannel->i_train,GP_ISIChannel->N_train);
    // Accumulate the statistics
    GP_ISIChannel->i_train++;
    if (GP_ISIChannel->i_train>=GP_ISIChannel->N_train) { // Statistics accumulated, post-training computation
      GP_ISIChannel->trainFlag=1;
    }
    return(0);
  }
}

// Contribute the fields to the berResultStruct that will be 
// printed in the berResult file. Every module contributes
// its own fields. User has to choose the fields to be saved
// using pushBerResultField() once per field to be added
void initBerResultStructGP_ISIChannel (GP_ISIChannelStruct *GP_ISIChannel,berResultStruct *berResult) {
  //pushBerResultField(berResult,"N","int","%1d",&GP_ISIChannel->N);
  //pushBerResultField(berResult,"R","double","%1lf",&GP_ISIChannel->R);
  pushBerResultField(berResult,"SNR","double","%3lf",&GP_ISIChannel->SNR);
  //pushBerResultField(berResult,"sigma","double","%5lf",&GP_ISIChannel->sigma);
  //pushBerResultField(berResult,"trainFlag","uint8_t","%9"SCNu8"",&GP_ISIChannel->trainFlag);
  //pushBerResultField(berResult,"N_train","long int","%7ld",&GP_ISIChannel->N_train);
  //pushBerResultField(berResult,"i_train","long int","%7ld",&GP_ISIChannel->i_train);
  //pushBerResultField(berResult,"numberOfMult","long unsigned int","%12lu",&GP_ISIChannel->numberOfMult);
  //pushBerResultField(berResult,"aveNoOfMultPerFrame","double","%19lf",&GP_ISIChannel->aveNoOfMultPerFrame);
  //pushBerResultField(berResult,"numberOfAdd","long unsigned int","%11lu",&GP_ISIChannel->numberOfAdd);
  //pushBerResultField(berResult,"aveNoOfAddPerFrame","double","%18lf",&GP_ISIChannel->aveNoOfAddPerFrame);
  //pushBerResultField(berResult,"numberOfComp","long unsigned int","%12lu",&GP_ISIChannel->numberOfComp);
  //pushBerResultField(berResult,"aveNoOfCompPerFrame","double","%19lf",&GP_ISIChannel->aveNoOfCompPerFrame);
  //pushBerResultField(berResult,"simTime","double","%7lf",&GP_ISIChannel->simTime);
  //pushBerResultField(berResult,"aveSimTimePerFrame","double","%18lf",&GP_ISIChannel->aveSimTimePerFrame);
  //pushBerResultField(berResult,"numberOfCalls","long unsigned int","%13lu",&GP_ISIChannel->numberOfCalls);
}

void ISIchannel(GP_ISIChannelStruct *GP_ISIChannel,  double* input, double* output){
    //Declaring ISI Channel Variables
    int i, j, z;
    int messageLen = (GP_ISIChannel->N)+4;              //Declaring length of Message Bits array, with additional 4 bits for convolution
    //printf("\n\nmessagelen:%d\n\n", messageLen);
      double ISI_co[] = {0.1,0.5,0.7,0.5,0.1};        //Declaring ISI Coefficients [Hard Coded]
    //uble ISI_co[] = {0.100001,0.500001,0.7000001,0.5000001,0.1000001}; 
    int ISILen = 5;                   //Calculating length of ISI Coefficients array
    int outputLen = messageLen;            //Calculating final output length for ISI Channel
    double conv[outputLen];

    //Declaring AWGN Variables
    double SNRdb = GP_ISIChannel->SNR;
    double coderate = 1; // Modify coderate
    double sigmaNoise;
    double noise;
    int idum = 1;
    double AWGNoutput[outputLen];

    //printf("\n\nOutputLen:%d\n\n", outputLen);

    //Computing ISI Channel****************************************************************************
    //[Printing ISI Coefficients]
    //printf("ISI MODULE");
    // printf("\nISI Coefficients:\t");
    // for (j=0;j<ISILen;j++)
    // {
    //     printf("%0.4lf ",ISI_co[j]);
    // }

    // //[Printing Message Bits]
    // printf("\nInput Message Bits:\t");
    // for (i=0;i<messageLen;i++)
    // {
    //     printf("%f ", input[i]);
    // }

    //[Convolution Algorithm]
    double sum = 0;
    int iteration, n, q;
    for (n=0; n<outputLen;n++)
    {
        iteration = n;
        for (q=0; q<=n; q++)
        {
	  if (messageLen<=q || ISILen<=iteration){
	    sum;
	    //printf("sum: %f\n", sum);
	  }

	  else
            {
	      sum += input[q]*ISI_co[iteration];
            }
	  iteration--;
        }
        conv[n] = sum;
        sum = 0;
    }

    
    //[Print Clean ISI Output]
    // printf("\n\nConv(message,ISI) is:\t");

    // for (z=0; z<outputLen; z++)
    // {
    //     printf("%0.4lf ", conv[z]);
    // }
    // printf("\n");

    // Generating ISI with AWGN***************************************************************************
    // printf("\n\nISI WITH AWGN");
    // printf("\nSNRdb = %lf", SNRdb);
    // printf("\nCoderate = %lf", coderate);
    sigmaNoise = sqrt(1.0/(2*coderate*pow(10, (SNRdb/10))));
    // printf("\nSigma Noise: %lf \n\n", sigmaNoise);

    srand(time(0));                                     //Randomize the Seed for rand() function

    for (z = 0; z < outputLen; z++)
    {
      // double RandNoise = (double)rand()/RAND_MAX;
      //printf("%d\n", z);
        noise = sigmaNoise*SWRC_randn(&idum);
        //printf("Random Noise: %lf", RandNoise);
        //noise = sigmaNoise*RandNoise;
        output[z] = conv[z] + noise;
        // printf("\tNoise: %0.4lf",noise);
        // printf("\tInput[%d]: %0.4lf", z, conv[z]);
        // printf("\tOutput[%d]: %0.4lf\n", z, output[z]);
    }
}

// Finally when everything is in place, the module must be
// run during the actual simulation. The code for running
// the module is in this function.
void runGP_ISIChannel (GP_ISIChannelStruct *GP_ISIChannel, signalStruct *signal) {
  int i;
  clock_t beginTime, endTime;
  int N_input;
  int N_output;
  uint8_t *input;
  double *output;
  beginTime=clock();
  printf("In function runGP_ISIChannel\n");
  // Allocate memory for 1 more signal. The output of this function should go there.
  // USER NEEDS TO EDIT: the LENGTH of the output vector and the TYPE of
  // the output vector 0=uint8_t, 1=char, 2=int, 3=unsigned int, 4=long unsigned int, 5=float, 6=double
  // The type of the input vector should also be set correctly by the USER.
  N_input  = signal->N[signal->N_N-1];        // Length of the input vector
  //printf("\n\nN_ISI:%d\n\n", N_input);
  input    = (uint8_t*) signal->x[signal->N_N-1]; // Assign pointer to the input memory

  int ISILen = 5;                   //Calculating length of ISI Coefficients array
  N_output = N_input + ISILen-1;                // Length of output vector
  //printf("\n\nN_output:%d\n\n", N_output);
  output   = (double*) incrementByOneSignal(signal, N_output, 6,"GP_ISIChannel");    // Create a new output vector on end of signal list
  

  // +++++++++++++++++++++++++++++++++++++++++++++++++
  // Tesing :
  //double testing_input[]  = {0, 0, 1,1,1,0,1,1,0,1}; // Note: After testing, change the below testing_input to input array

  // Eve: I changed the 0 bit to -1 bit here 
  double temp_input[N_input+4]; 
  for (i = 0; i < N_input; i++) {
    if (input[i] ==  0) {
      temp_input[i] = -1;
    }
    else {
      temp_input[i] = 1;
    }
   
  }

  // Pushing extra 4 negative bits behind the input 
  for (i = (N_input+3); i >= N_input; i--) {
      temp_input[i] = -1;
  }

  // Computation Engine for ISI Channel
  ISIchannel(GP_ISIChannel, temp_input, output);
  
  // Save the time for the computation engine
  endTime = clock();
  GP_ISIChannel->simTime+=(double)(endTime-beginTime)/CLOCKS_PER_SEC;
  GP_ISIChannel->numberOfCalls++;
}


